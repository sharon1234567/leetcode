广度有限搜索（BFS）要点：
1. 建立当前节点和相邻节点的映射关系，即如何建立搜索路径。leetcode的这个问题是给定二维矩阵，因此通过设置dx，dy来实现从当前节点搜索相邻节点的目的。
其他问题（比如地铁路线）可以设置字典，用键值对实现从当前节点到相邻节点的迁移。
2. 先进先出，当前节点和相邻节点依次被放入队列（deque）中，用循环依次访问队列中的每个节点，访问一个删除一个（popleft），直到访问到目标节点


class Solution(object):
    # 从每个空房间出发 BFS
    def wallsAndGates(self, rooms):
        """
        :type rooms: List[List[int]]
        :rtype: None Do not return anything, modify rooms in-place instead.
        """
        
        from collections import deque
        if not rooms or not rooms[0]:
            return rooms
        m, n = len(rooms), len(rooms[0])
        dx = [1, -1, 0, 0]
        dy = [0, 0, 1, -1]
        def bfs(x0, y0):
            step = 0
            visited = set()
            visited.add((x0, y0))
            queue = deque([((x0, y0), 0)])
            while queue:
                pos, step = queue.popleft()
                x0, y0 = pos
                if rooms[x0][y0] == 0: #找到了最近的门
                    return step
                for k in range(4):
                    x = x0 + dx[k]
                    y = y0 + dy[k]
                    if 0 <= x < m and 0 <= y < n and (x, y) not in visited and rooms[x][y] != -1:
                        visited.add((x, y))
                        queue.append(((x, y), step + 1))
            return 2147483647      
            
        for i in range(m):
            for j in range(n):
                if rooms[i][j] == 2147483647: # 从每个空房间出发
                    rooms[i][j] = bfs(i, j)
        return rooms
  
  #从门出发，遍历一遍地图
  def wallsAndGates(self, rooms):
        """
        :type rooms: List[List[int]]
        :rtype: None Do not return anything, modify rooms in-place instead.
        """
        from collections import deque
        if not rooms or not rooms[0]:
            return rooms
        m, n = len(rooms), len(rooms[0])
        dx = [1, -1, 0, 0]
        dy = [0, 0, 1, -1]
        INF = 2147483647
        queue = deque()
        def bfs(queue):
            while queue:
                pos = queue.popleft()
                x0, y0 = pos
                
                for k in range(4):
                    x = x0 + dx[k]
                    y = y0 + dy[k]
                    if 0 <= x < m and 0 <= y < n and rooms[x][y] == INF:
                        rooms[x][y] = rooms[x0][y0] + 1
                        queue.append((x, y))
                
        for i in range(m):
            for j in range(n):
                if rooms[i][j] == 0: #现在从每扇门出发
                    queue.append((i, j))
        bfs(queue)
