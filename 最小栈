以下这个算法的耗时太长，原因是getMin()用到了排序和搜索
class MinStack(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stack = []


    def push(self, x):
        """
        :type x: int
        :rtype: None
        """
        return self.stack.append(x)

    def pop(self):
        """
        :rtype: None
        """
        
        n = len(self.stack)
        if n > 0:
            del self.stack[-1]
            return  self.stack
        else:
            return None


    def top(self):
        """
        :rtype: int
        """
        return self.stack[-1]


    def getMin(self):
        """
        :rtype: int
        """
        return min(self.stack)

以下这个算法的思路是，当数字传入的时候，就把当时最小的索引保存下来，存放在最末位。这样调用最小栈时，直接读取最末位（栈顶）就可以了
这个思路是用空间换时间
class MinStack(object):

    def __init__(self):
        self.data = [(None, float('inf'))]

    def push(self, x):
        self.data.append((x, min(x, self.data[-1][1])))

    def pop(self):
        if len(self.data) > 1: self.data.pop()
  

    def top(self):
        return self.data[-1][0]

    def getMin(self):
        return self.data[-1][1]
